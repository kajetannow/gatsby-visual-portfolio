{"version":3,"sources":["webpack:///./src/components/AlbumCover.js","webpack:///./src/pages/photos.js","webpack:///./src/components/Picture.js","webpack:///./src/components/InfoIcon.js","webpack:///./src/components/Meta.js"],"names":["AlbumCover","props","meta","className","URL","to","thumb","Picture","src","type","Loading","title","Meta","PhotosPage","data","markdownRemark","frontmatter","albumCovers","console","log","Layout","map","el","i","key","photo","childImageSharp","fluid","alt","InfoIcon","divClassName","Icon","name","children","Object","keys"],"mappings":"iOAMe,SAASA,EAAWC,GAC/B,IAAMC,EAAOD,EAAMC,KACnB,OACA,yBAAKC,UAAU,+BACTF,EAAMG,IACR,kBAAC,OAAD,CAAMC,GAAIJ,EAAMG,IAAKD,UAAU,uBAC7BF,EAAMK,MACR,kBAACC,EAAA,EAAD,CAASC,IAAKP,EAAMK,MAAOG,KAAK,wBADhB,kBAACC,EAAA,EAAD,OAFF,kBAACA,EAAA,EAAD,MAMZT,EAAMG,IACR,4BAAI,kBAAC,OAAD,CAAMC,GAAIJ,EAAMG,KAAMH,EAAMU,MAAQV,EAAMU,MAAQ,kBAACD,EAAA,EAAD,QADxC,kBAACA,EAAA,EAAD,MAGd,kBAACE,EAAA,EAAD,CAAMV,KAAMA,K,gBCZL,SAASW,IAEpB,IAAIC,EAAI,OA4BR,OAFAA,EAAOA,EAAKC,eAAeC,YAAYC,YACvCC,QAAQC,IAAIL,GAGZ,kBAACM,EAAA,EAAD,CAAQT,MAAM,WACZG,EACEA,EAAKO,KAAI,SAACC,EAAIC,GAAL,OAAS,kBAACvB,EAAD,CAAYwB,IAAKD,EAAGZ,MAAOW,EAAGX,MAAOL,MAAOgB,EAAGG,MAAMC,gBAAgBC,MAAOzB,KAAMoB,EAAGpB,KAAME,IAAG,WAAakB,EAAGlB,SAD3H,kBAACM,EAAA,EAAD,S,kCCxCb,gFAEe,SAASH,EAAQN,GAC5B,OACI,kBAAC,IAAD,CAAO0B,MAAO1B,EAAMO,IAAKoB,IAAK3B,EAAM2B,IAAKzB,UAAWF,EAAMQ,S,+1QCDnD,SAASoB,EAAS5B,GAC7B,OACI,yBAAKE,UAAWF,EAAM6B,cACtB,kBAACC,EAAA,EAAD,CAAMC,KAAM/B,EAAM+B,KAAMJ,IAAK3B,EAAM+B,KAAMvB,KAAK,YAC9C,0BAAMN,UAAU,YAAYF,EAAMgC,W,gBCH3B,SAASrB,EAAKX,GAEzB,IAAMC,EAAOD,EAAMC,KACnB,OACA,oCACEA,EAAoBgC,OAAOC,KAAKjC,GAAMmB,KAAI,SAACC,EAAIC,GAAL,OAAUrB,EAAKoB,GAAM,kBAACO,EAAD,CAAUG,KAAMV,EAAIE,IAAKD,EAAGO,aAAa,aAAa5B,EAAKoB,IAAkB,MAArI,kBAACZ,EAAA,EAAD","file":"component---src-pages-photos-js-1cc2bc20ef0d5cf27433.js","sourcesContent":["import React from 'react';\r\nimport Picture from './Picture';\r\nimport Meta from './Meta';\r\nimport Loading from './Loading';\r\nimport { Link } from 'gatsby';\r\n\r\nexport default function AlbumCover(props){\r\n    const meta = props.meta\r\n    return(\r\n    <div className=\"content-element album-cover\">\r\n        {!props.URL ? <Loading /> :\r\n        <Link to={props.URL} className=\"album-cover-picture\">\r\n        {!props.thumb ? <Loading /> :\r\n        <Picture src={props.thumb} type=\"album-cover-picture\"></Picture>}\r\n        </Link>}\r\n        \r\n        {!props.URL ? <Loading /> :\r\n        <h4><Link to={props.URL}>{props.title ? props.title : <Loading />}</Link></h4>\r\n        }\r\n        <Meta meta={meta} />\r\n\r\n        \r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport AlbumCover from '../components/AlbumCover';\r\nimport Loading from '../components/Loading';\r\nimport Layout from '../components/Layout';\r\n\r\n\r\nexport default function PhotosPage(){\r\n\r\n    var data = useStaticQuery(graphql`\r\n    query AlbumCoversQuery {\r\n      markdownRemark(fileAbsolutePath: {regex: \"/albumCovers/\"}) {\r\n        frontmatter {\r\n          albumCovers {\r\n            title\r\n            URL\r\n            meta {\r\n              person\r\n              time\r\n              location\r\n            }\r\n            photo {\r\n              childImageSharp {\r\n                fluid {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n      \r\n    `);\r\n\r\n    data = data.markdownRemark.frontmatter.albumCovers\r\n    console.log(data)\r\n    return(\r\n      \r\n    <Layout title=\"ZdjÄ™cia\">\r\n    {!data ? <Loading /> :\r\n        data.map((el, i)=><AlbumCover key={i} title={el.title} thumb={el.photo.childImageSharp.fluid} meta={el.meta} URL={`/photos/${el.URL}`} />)\r\n    }\r\n    </Layout>\r\n    );\r\n}","import React from 'react';\r\nimport Image from \"gatsby-image\";\r\nexport default function Picture(props){\r\n    return(\r\n        <Image fluid={props.src} alt={props.alt} className={props.type}/>\r\n    );\r\n}","import React from 'react';\r\nimport Icon from './Icon';\r\n\r\nexport default function InfoIcon(props){\r\n    return(\r\n        <div className={props.divClassName}>\r\n        <Icon name={props.name} alt={props.name} type=\"icon-sm\"/>\r\n        <span className=\"thin alt\">{props.children}</span>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport InfoIcon from './InfoIcon';\r\nimport Loading from './Loading';\r\n\r\nexport default function Meta(props){\r\n    \r\n    const meta = props.meta;\r\n    return(\r\n    <>\r\n    {!meta ? <Loading/> : Object.keys(meta).map((el, i)=>(meta[el] ? <InfoIcon name={el} key={i} divClassName=\"info-icon\">{meta[el]}</InfoIcon> : \"\"))}\r\n    </>\r\n    );\r\n}"],"sourceRoot":""}