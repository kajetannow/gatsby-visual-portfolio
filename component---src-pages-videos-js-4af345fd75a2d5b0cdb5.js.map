{"version":3,"sources":["webpack:///./src/components/ContentSection.js","webpack:///./src/pages/videos.js","webpack:///./src/components/Loading.js","webpack:///./src/components/DescriptionBlock.js","webpack:///./src/components/InfoIcon.js","webpack:///./src/components/Meta.js"],"names":["ContentSection","props","className","DescriptionBlock","title","meta","children","src","URL","frameBorder","allow","allowFullScreen","VideosPage","data","allMarkdownRemark","edges","Layout","map","video","i","key","node","frontmatter","videos","dangerouslySetInnerHTML","__html","html","Loading","alt","InfoIcon","divClassName","Icon","name","type","Meta","Object","keys","el"],"mappings":"yMAGe,SAASA,EAAeC,GACnC,OACA,6BAASC,UAAU,mBACf,kBAACC,EAAA,EAAD,CAAkBC,MAAOH,EAAMG,MAAOC,KAAMJ,EAAMI,MAC7CJ,EAAMK,UAEX,4BAAQC,IAAKN,EAAMO,IAAKJ,MAAOH,EAAMG,MAAOF,UAAU,4BAA4BO,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,K,gBCH1L,SAASC,IACpB,IAAIC,EAAI,OAyBR,OADAA,EAAOA,EAAKC,kBAAkBC,MAG9B,kBAACC,EAAA,EAAD,CAAQZ,MAAM,SACRS,EAAqBA,EAAKI,KAAI,SAACC,EAAMC,GAAP,OACxB,kBAACnB,EAAD,CAAgBoB,IAAKD,EACrBf,MAAOc,EAAMG,KAAKC,YAAYC,OAAvB,MACPlB,KAAMa,EAAMG,KAAKC,YAAYC,OAAvB,KACNf,IAAKU,EAAMG,KAAKC,YAAYC,OAAvB,KAEL,yBAAKC,wBAAyB,CAAEC,OAAQP,EAAMG,KAAKK,MAAQxB,UAAU,4BANpE,kBAACyB,EAAA,EAAD,S,kCCnCjB,2DAEe,SAASA,IACpB,OACI,yBAAKpB,IAAK,qBAAsBqB,IAAI,UAAU1B,UAAU,c,8kBCJhE,mFAIe,SAASC,EAAiBF,GAErC,IAAMI,EAAOJ,EAAMI,KACnB,OACA,6BAASH,UAAU,qCACf,4BAAKD,EAAMG,MAAQH,EAAMG,MAAQ,kBAAC,IAAD,OACjC,kBAAC,IAAD,CAAMC,KAAMA,IACXJ,EAAMK,Y,6JCRA,SAASuB,EAAS5B,GAC7B,OACI,yBAAKC,UAAWD,EAAM6B,cACtB,kBAACC,EAAA,EAAD,CAAMC,KAAM/B,EAAM+B,KAAMJ,IAAK3B,EAAM+B,KAAMC,KAAK,YAC9C,0BAAM/B,UAAU,YAAYD,EAAMK,WCH3B,SAAS4B,EAAKjC,GAEzB,IAAMI,EAAOJ,EAAMI,KACnB,OACA,oCACEA,EAAY8B,OAAOC,KAAK/B,GAAMY,KAAI,SAACoB,EAAIlB,GAAL,OAAUd,EAAKgC,GAAM,kBAACR,EAAD,CAAUG,KAAMK,EAAIjB,IAAKD,EAAGW,aAAa,aAAazB,EAAKgC,IAAkB,MAA7H","file":"component---src-pages-videos-js-4af345fd75a2d5b0cdb5.js","sourcesContent":["import React from 'react';\r\nimport DescriptionBlock from './DescriptionBlock';\r\n\r\nexport default function ContentSection(props){\r\n    return(\r\n    <section className=\"content-section\">\r\n        <DescriptionBlock title={props.title} meta={props.meta}>\r\n            {props.children}\r\n        </DescriptionBlock>\r\n        <iframe src={props.URL} title={props.title} className=\"content-section-thumbnail\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n    </section>\r\n    );\r\n}","import React from 'react';\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Loading from '../components/Loading';\r\nimport ContentSection from '../components/ContentSection';\r\nimport Layout from '../components/Layout';\r\n\r\nexport default function VideosPage(){\r\n    let data = useStaticQuery(graphql`\r\n    query AllVideosQuery {\r\n      allMarkdownRemark(filter: {fileAbsolutePath: {regex: \"/videos/\"}}) {\r\n        edges {\r\n          node {\r\n            html\r\n            frontmatter {\r\n              videos {\r\n                title\r\n                URL\r\n                meta {\r\n                  person\r\n                  duration\r\n                  time\r\n                  location\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    `);\r\n    data = data.allMarkdownRemark.edges\r\n    return(\r\n        \r\n    <Layout title=\"Wideo\">\r\n        {!data ? <Loading /> : data.map((video,i)=>\r\n                <ContentSection key={i} \r\n                title={video.node.frontmatter.videos[\"title\"]} \r\n                meta={video.node.frontmatter.videos[\"meta\"]} \r\n                URL={video.node.frontmatter.videos[\"URL\"]}\r\n                >\r\n                <div dangerouslySetInnerHTML={{ __html: video.node.html }} className=\"description-content\"></div> \r\n                </ContentSection>\r\n        )}\r\n    </Layout>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function Loading(){\r\n    return(\r\n        <img src={\"/icons/loading.svg\"} alt=\"Loading\" className=\"icon-lr\" />\r\n    );\r\n}","import React from 'react';\r\nimport Loading from './Loading';\r\nimport Meta from './Meta';\r\n\r\nexport default function DescriptionBlock(props){\r\n    \r\n    const meta = props.meta;\r\n    return(\r\n    <article className=\"content-element description-block\">\r\n        <h3>{props.title ? props.title : <Loading />}</h3>\r\n        <Meta meta={meta} />\r\n        {props.children}\r\n    </article>\r\n    );\r\n}","import React from 'react';\r\nimport Icon from './Icon';\r\n\r\nexport default function InfoIcon(props){\r\n    return(\r\n        <div className={props.divClassName}>\r\n        <Icon name={props.name} alt={props.name} type=\"icon-sm\"/>\r\n        <span className=\"thin alt\">{props.children}</span>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport InfoIcon from './InfoIcon';\r\n\r\n\r\nexport default function Meta(props){\r\n    \r\n    const meta = props.meta;\r\n    return(\r\n    <>\r\n    {!meta ? \"\" : Object.keys(meta).map((el, i)=>(meta[el] ? <InfoIcon name={el} key={i} divClassName=\"info-icon\">{meta[el]}</InfoIcon> : \"\"))}\r\n    </>\r\n    );\r\n}"],"sourceRoot":""}